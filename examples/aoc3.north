proc newline do 10 end
proc zero do "0" 0 string_view_get end
proc nine do "9" 0 string_view_get end
proc period do "." 0 string_view_get end

proc mod do
	over over / * - // a%b = a - (b * (a/b))
end

proc is_digit do // ( char -- bool )
	if dup zero >= over nine <= and drop2 do
		true
	else
		false
	end
end

proc is_symbol do // ( char -- bool )
	dup is_digit not swap // ( bool char -- )
	dup newline != swap // ( bool bool char -- )
	period != and and
end

proc check_adjacent do // ( data index width height -- bool)
	height dup variable !
	width dup variable !
	index dup variable !
	data dup variable !


	index ? width ? 1 +
	over over mod xpos dup variable !
				/ ypos dup variable !

	false has_adjacent dup variable !

	0 1 - xoffset dup variable !
	while xoffset ? 1 <= do
		0 1 - yoffset dup variable !
		while yoffset ? 1 <= do
			if xoffset ? 0 == yoffset ? 0 == and not do
				true valid_pos dup variable !
				xpos ? xoffset ? +
				if dup 0 < over width ? >= or do
					false valid_pos !
				end
				// "Checking xpos" print dup print
				drop

				ypos ? yoffset ? +
				if dup 0 < over height ? >= or do
					false valid_pos !
				end
				// "Checking ypos" print dup print
				drop

				// data ? index ? + ? zero - print
				if valid_pos ? do
					data ?
					xpos ? xoffset ? +
					ypos ? yoffset ? + width ? 1 + * +  // Add one becaue newline
					// "index is" print dup print
					+ ? 
					// "VALUE IS" print dup print

					is_symbol has_adjacent ? or has_adjacent !
				end
				
			end
			yoffset ? 1 + yoffset !
		end
		xoffset ? 1 + xoffset !
	end

	has_adjacent ?
end

proc part1 do
	data variable
	size variable

	read_file size ! data !
	data ? size ? as_string_view print
	0 index dup variable !

	0 gridwidth dup variable !
	0 gridheight dup variable !

	while index ? size ? < do
		while data ? index ? + ? newline != do
			index ? 1 + index !
		end
		if gridwidth ? 0 == do
			index ? gridwidth !
		end
		gridheight ? 1 + gridheight !
		index ? 1 + index !
	end

	"Grid width" print
	gridwidth ? print

	"Grid height" print
	gridheight ? print

	0 index !

	0 partsum dup variable !

	while index ? size ? < do
		if data ? index ? + ? is_digit do
			data ? index ? + size ? index ? - parse_number resultnumber dup variable !
			// "Resultnumber" print resultnumber ? print
			false is_adjacent dup variable !
			while data ? index ? + ? is_digit do
				if data ? index ? gridwidth ? gridheight ? check_adjacent do
					true is_adjacent ? or is_adjacent !
				end
				index ? 1 + index !
			end

			if is_adjacent ? do
				partsum ? resultnumber ? + partsum !
			end

		end

		index ? 1 + index !
	end

	"Final partsum" print
	partsum ? print

	data ? dealloc
end

proc find_surrounding_number do
	height dup variable !
	width dup variable !
	index dup variable !
	data dup variable !


	index ? width ? 1 +
	over over mod xpos dup variable !
				/ ypos dup variable !

	0 count_adjacent dup variable !

	0 1 - xoffset dup variable !
	while xoffset ? 1 <= do
		0 1 - yoffset dup variable !
		while yoffset ? 1 <= do
			if xoffset ? 0 == yoffset ? 0 == and not do
				true valid_pos dup variable !
				xpos ? xoffset ? +
				if dup 0 < over width ? >= or do
					false valid_pos !
				end
				// "Checking xpos" print dup print
				drop

				ypos ? yoffset ? +
				if dup 0 < over height ? >= or do
					false valid_pos !
				end
				// "Checking ypos" print dup print
				drop

				// data ? index ? + ? zero - print
				if valid_pos ? do
					data ?
					xpos ? xoffset ? +
					ypos ? yoffset ? + width ? 1 + * +  // Add one becaue newline
					// "index is" print dup print
					+ ? 
					// "VALUE IS" print dup print

					if is_digit do

						// IMPORTANT: Put both values on the stack
						xpos ? xoffset ? +
						ypos ? yoffset ? +

						count_adjacent ? 1 + count_adjacent !
					end
				end
				
			end
			yoffset ? 1 + yoffset !
		end
		xoffset ? 1 + xoffset !
	end

	count_adjacent ?
end

proc part2 do
	data variable
	size variable

	read_file size ! data !
	0 index dup variable !

	0 gridwidth dup variable !
	0 gridheight dup variable !

	while index ? size ? < do
		while data ? index ? + ? newline != do
			index ? 1 + index !
		end
		if gridwidth ? 0 == do
			index ? gridwidth !
		end
		gridheight ? 1 + gridheight !
		index ? 1 + index !
	end

	0 index !

	0 gearsum dup variable !

	while index ? size ? < do
		if data ? index ? + ? "*" 0 string_view_get == do
			data ? index ? gridwidth ? gridheight ? find_surrounding_number

			total_count dup variable ! // Store the count
			0 ri dup variable !

			total_count ? 2 * size_int * alloc int_list dup variable !

			while ri ? total_count ? < do
				swap
				int_list ? ri ? 2 * 0 + size_int * + write_int
				int_list ? ri ? 2 * 1 + size_int * + write_int
				ri ? 1 + ri !
			end
			0 ri !

			total_count ? alloc adjacent_list dup variable !
			while ri ? total_count ? < do
				0 adjacent_list ? ri ? + !
				ri ? 1 + ri !
			end
			0 ri !

			while ri ? total_count ? < do
				0 ri2 dup variable !
				while ri2 ? total_count ? < do
					if ri2 ? ri ? != do
						int_list ? ri ? 2 * 0 + size_int * + read_int riXpos dup variable !
						int_list ? ri ? 2 * 1 + size_int * + read_int riYpos dup variable !
						int_list ? ri2 ? 2 * 0 + size_int * + read_int ri2Xpos dup variable !
						int_list ? ri2 ? 2 * 1 + size_int * + read_int ri2Ypos dup variable !

						if riXpos ? ri2Xpos ? < riYpos ? ri2Ypos ? == and riXpos ? ri2Xpos ? - 0 1 - == and do
							1 adjacent_list ? ri2 ? + !
						end
					end
					ri2 ? 1 + ri2 !
				end
				ri ? 1 + ri !
			end
			0 ri !

			0 valid_numbers_count dup variable !
			1 gear_ratio dup variable !
			
			while ri ? total_count ? < do
				if adjacent_list ? ri ? + ? 0 == do
					int_list ? ri ? 2 * 0 + size_int * + read_int riXpos dup variable !
					int_list ? ri ? 2 * 1 + size_int * + read_int riYpos dup variable !

					// We now have the xpos and ypos of a number
					// need to walk as far left as long as we get digits

					if riXpos ? 0 > do
						while
							data ?
							riXpos ? 1 -
							riYpos ? gridwidth ? 1 + * +
							+ ? is_digit
						do
							riXpos ? 1 - riXpos !
							if riXpos ? 0 == do
								break
							end
						end
					end

					valid_numbers_count ? 1 + valid_numbers_count !
					riXpos ? riYpos ? gridwidth ? 1 + * + dup data ? swap + swap size ? swap - parse_number
					gear_ratio ? * gear_ratio !
				end
				ri ? 1 + ri !
			end
			0 ri !

			adjacent_list ? dealloc
			int_list ? dealloc

			if valid_numbers_count ? 2 > do
				"ERROR MORE THAN TWO VALID NUMBERS" print
			end

			if valid_numbers_count ? 2 == do
				gearsum ? gear_ratio ? + gearsum !
			end

		end
		index ? 1 + index !
	end

	"Final gearsum print" print
	gearsum ? print

	data ? dealloc
end

proc main do
	"TEST" print
	"std.north" import

	"examples/input3.txt" part1
	"examples/input3.txt" part2
end
